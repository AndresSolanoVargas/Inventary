@using Bussines
@using Entities
@using Bussines.Bussines_InputOutput
@using Bussines.Bussines_Warehouse
@using Bussines.Bussines_Store

<div class="form-group">
    <select class="form-control" @onchange="OnchangedWarehouse">
        <option value="">Selecione una bodega...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Selecione un  Producto...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la Cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label>Es una entrada ?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>
    <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut">
</EditForm>

<div class="text-center alert-success">
    @message
</div>


@code {
    InputOutputEntity oInOut = new InputOutputEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();
    string message;
    Verificaction verificaction = new Verificaction();
    ReadWarehouse ReadWarehouse = new ReadWarehouse();
    StoragesProduct storagesProduct = new StoragesProduct();


    string buttonValue => oInOut.IsInput ? "Registrar entrada" : "Es una salida";

    protected override async Task OnInitializedAsync()
    {
        warehouses = ReadWarehouse.ItemList();
    }

    private void OnchangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = storagesProduct.storagesProductByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        message = verificaction.SaveInOut(oProduct, storages, oStorage, oInOut);
    }

}

}
