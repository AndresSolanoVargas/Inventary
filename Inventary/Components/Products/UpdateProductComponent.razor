@using Entities
@using Bussines.Bussines_Product
@using Bussines.Bussines_Category


@inject NavigationManager NavManager

<EditForm Model="oProduct">
    <div class="form-group">
        <label>Producto:</label>
        <InputText class="form-control" @bind-Value="oProduct.ProductName" />
    </div>
    <div class="form-group">
        <label>Descripcion:</label>
        <InputTextArea class="form-control" @bind-Value="oProduct.ProductDescription" />
    </div>

    <div class="form-group">
        <label>Categoria:</label>
        <InputSelect class="form-control" @bind-Value="oProduct.IdCategory">
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </InputSelect>>
    </div>
    <input type="button" value="Actualizar Producto" @onclick="UpDateProduct">
    <input type="button" value="Regresar" @onclick="Return">
</EditForm>

@code {
    [Parameter]
    public string IdProduct { get; set; }
    ProductEntity oProduct = new ProductEntity();
    List<CategoryEntity> categories = new List<CategoryEntity>();
    UpdateProducto UpdateProducto = new UpdateProducto();
    FindProduct FindProduct = new FindProduct();
    ReadCategories ReadCategories = new ReadCategories();
   

    protected override async Task OnInitializedAsync()
    {
        categories = ReadCategories.ItemList();
        oProduct = FindProduct.FindElement(IdProduct);
    }

    private void UpDateProduct()
    {
        UpdateProducto.Update(oProduct);
        NavManager.NavigateTo("product/list");
    }

    private void Return()
    {
        NavManager.NavigateTo("product/list");
    }
}
